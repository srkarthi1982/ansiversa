---
import Layout from "../../layouts/Layout.astro";
import Button from "../../components/Button.astro";
import ResultView from "./components/ResultView.astro";
import { getSessionWithUser } from "../../utils/session.server";
import { resultRepository } from "../../actions/quiz/repositories";
import { db, Question, Platform, Subject, Topic, Roadmap, eq, desc, inArray } from "astro:db";

const session = await getSessionWithUser(Astro.cookies);
if (!session?.user) {
  const target = `${Astro.url.pathname}${Astro.url.search}`;
  return Astro.redirect(`/app/login?redirect=${encodeURIComponent(target)}`);
}
const user = session.user;

const pageSize = 8;
const requestedPage = Number.parseInt(Astro.url.searchParams.get("page") ?? "1", 10);
const page = Number.isFinite(requestedPage) && requestedPage > 0 ? requestedPage : 1;

const paginated = await resultRepository.getPaginatedData({
  where: (table) => eq(table.userId, user.id),
  orderBy: (table) => desc(table.createdAt),
  page,
  pageSize,
});

const results = paginated.data;
const normalizeOptions = (value: unknown): string[] => {
  if (Array.isArray(value)) {
    return value
      .map((entry) => {
        if (typeof entry === "string") return entry;
        if (typeof entry === "number" || typeof entry === "boolean") return String(entry);
        try {
          return JSON.stringify(entry);
        } catch {
          return "";
        }
      })
      .filter((entry) => entry.length > 0);
  }
  if (value && typeof value === "object") {
    return Object.values(value as Record<string, unknown>)
      .map((entry) => {
        if (typeof entry === "string") return entry;
        if (typeof entry === "number" || typeof entry === "boolean") return String(entry);
        try {
          return JSON.stringify(entry);
        } catch {
          return "";
        }
      })
      .filter((entry) => entry.length > 0);
  }
  return [];
};

type RawResponse = { id?: unknown; a?: unknown; s?: unknown };

const questionIds = new Set<number>();
const platformIds = new Set<number>();
const subjectIds = new Set<number>();
const topicIds = new Set<number>();
const roadmapIds = new Set<number>();
const parsedResults = results.map((result) => {
  if (Number.isFinite(result.platformId)) platformIds.add(Number(result.platformId));
  if (Number.isFinite(result.subjectId)) subjectIds.add(Number(result.subjectId));
  if (Number.isFinite(result.topicId)) topicIds.add(Number(result.topicId));
  if (Number.isFinite(result.roadmapId)) roadmapIds.add(Number(result.roadmapId));
  const responses: RawResponse[] = Array.isArray(result.responses) ? (result.responses as RawResponse[]) : [];
  responses.forEach((entry) => {
    const qid = typeof entry?.id === "number" ? entry.id : Number(entry?.id);
    if (Number.isFinite(qid)) {
      questionIds.add(qid);
    }
  });
  return { result, responses };
});

const questionRows =
  questionIds.size > 0
    ? await db
        .select()
        .from(Question)
        .where(inArray(Question.id, Array.from(questionIds)))
    : [];

const questionMap = new Map(
  questionRows.map((row) => [
    row.id,
    {
      id: row.id,
      questionText: row.q,
      options: normalizeOptions(row.o),
      explanation: typeof row.e === "string" ? row.e : "",
      level: typeof row.l === "string" ? row.l : null,
    },
  ]),
);

const platformMap = await (async () => {
  if (platformIds.size === 0) return new Map<number, string>();
  const rows = await db
    .select({ id: Platform.id, name: Platform.name })
    .from(Platform)
    .where(inArray(Platform.id, Array.from(platformIds)));
  return new Map(rows.map((row) => [row.id, row.name ?? `Platform ${row.id}`]));
})();

const subjectMap = await (async () => {
  if (subjectIds.size === 0) return new Map<number, string>();
  const rows = await db
    .select({ id: Subject.id, name: Subject.name })
    .from(Subject)
    .where(inArray(Subject.id, Array.from(subjectIds)));
  return new Map(rows.map((row) => [row.id, row.name ?? `Subject ${row.id}`]));
})();

const topicMap = await (async () => {
  if (topicIds.size === 0) return new Map<number, string>();
  const rows = await db
    .select({ id: Topic.id, name: Topic.name })
    .from(Topic)
    .where(inArray(Topic.id, Array.from(topicIds)));
  return new Map(rows.map((row) => [row.id, row.name ?? `Topic ${row.id}`]));
})();

const roadmapMap = await (async () => {
  if (roadmapIds.size === 0) return new Map<number, string>();
  const rows = await db
    .select({ id: Roadmap.id, name: Roadmap.name })
    .from(Roadmap)
    .where(inArray(Roadmap.id, Array.from(roadmapIds)));
  return new Map(rows.map((row) => [row.id, row.name ?? `Roadmap ${row.id}`]));
})();

const dateFormatter = new Intl.DateTimeFormat("en-US", {
  dateStyle: "medium",
  timeStyle: "short",
});

const resultsPayload = parsedResults.map(({ result, responses }) => {
  const markValue = typeof result.mark === "number" ? result.mark : Number(result.mark ?? 0);
  const enriched = responses
    .map((entry) => {
      const questionId = typeof entry?.id === "number" ? entry.id : Number(entry?.id);
      if (!Number.isFinite(questionId)) return null;
      const question = questionMap.get(questionId);
      const correctIndex = typeof entry?.a === "number" ? entry.a : Number(entry?.a);
      const rawSelected = entry?.s ?? null;
      const selectedIndex =
        typeof rawSelected === "number"
          ? rawSelected
          : typeof rawSelected === "string"
            ? Number(rawSelected)
            : Number(rawSelected ?? Number.NaN);
      const normalizedSelectedIndex = Number.isFinite(selectedIndex) ? Number(selectedIndex) : -1;
      return {
        questionId,
        questionText: question?.questionText ?? "Question unavailable",
        options: question?.options ?? [],
        explanation: question?.explanation ?? "",
        level: question?.level ?? null,
        correctIndex: Number.isFinite(correctIndex) ? correctIndex : -1,
        selectedIndex: normalizedSelectedIndex,
        selectionCaptured: normalizedSelectedIndex >= 0,
        selectionFallback: false,
      };
    })
    .filter(Boolean);

  if (markValue === enriched.length) {
    enriched.forEach((entry) => {
      if (!entry.selectionCaptured && entry.correctIndex >= 0) {
        entry.selectedIndex = entry.correctIndex;
        entry.selectionCaptured = true;
        entry.selectionFallback = true;
      }
    });
  }

  const createdAt =
    result.createdAt instanceof Date ? result.createdAt : new Date(result.createdAt ?? Date.now());

  return {
    id: result.id,
    mark: typeof result.mark === "number" ? result.mark : Number(result.mark ?? 0),
    totalQuestions: enriched.length,
    level: result.level,
    createdAtISO: createdAt.toISOString(),
    createdAtLabel: dateFormatter.format(createdAt),
    platformId: result.platformId,
    subjectId: result.subjectId,
    topicId: result.topicId,
    roadmapId: result.roadmapId,
    platformName: platformMap.get(Number(result.platformId)) ?? `Platform ${result.platformId}`,
    subjectName: subjectMap.get(Number(result.subjectId)) ?? `Subject ${result.subjectId}`,
    topicName: topicMap.get(Number(result.topicId)) ?? `Topic ${result.topicId}`,
    roadmapName: roadmapMap.get(Number(result.roadmapId)) ?? `Roadmap ${result.roadmapId}`,
    responses: enriched,
  };
});

const pagination = {
  page: paginated.page,
  totalPages: paginated.totalPages,
  hasPreviousPage: paginated.hasPreviousPage,
  hasNextPage: paginated.hasNextPage,
};

const computePageNumbers = (current: number, total: number): Array<number | "ellipsis"> => {
  if (total <= 7) {
    return Array.from({ length: total }, (_, index) => index + 1);
  }
  const pages = new Set<number>([1, total, current]);
  for (let offset = 1; offset <= 2; offset += 1) {
    if (current - offset > 1) pages.add(current - offset);
    if (current + offset < total) pages.add(current + offset);
  }
  const sorted = Array.from(pages).sort((a, b) => a - b);
  const result: Array<number | "ellipsis"> = [];
  sorted.forEach((value, index) => {
    result.push(value);
    const next = sorted[index + 1];
    if (typeof next === "number" && next - value > 1) {
      result.push("ellipsis");
    }
  });
  return result;
};

const pageNumbers = computePageNumbers(pagination.page, pagination.totalPages);
const resultsSerialized = JSON.stringify(resultsPayload).replace(/</g, "\\u003c");
---
<Layout>
  <main class="bg-slate-50 min-h-screen">
    <section
      x-data={`(() => ({ modalOpen: false, selected: null, results: ${resultsSerialized} }))()`}
    >
      <div class="mx-auto max-w-6xl px-4 sm:px-6 lg:px-8 space-y-10">
        <header class="flex flex-col gap-3 sm:flex-row sm:items-center sm:justify-between">
          <div>
            <h1 class="text-3xl font-bold tracking-tight text-slate-900 sm:text-4xl">Quiz results</h1>
            <p class="text-sm text-slate-500">
              Review your attempts and drill into detailed answers for every quiz you have completed.
            </p>
          </div>
          <div class="flex flex-wrap items-center gap-3">
            <Button href="/quiz/test" variant="primary">
              Retake a quiz
            </Button>
          </div>
        </header>

        <div class="grid gap-4 rounded-3xl border border-slate-200 bg-white p-6 shadow-sm">
          <template x-if="results.length === 0">
            <div class="rounded-2xl border border-dashed border-slate-200 bg-slate-50 p-10 text-center text-slate-500">
              <p class="text-sm">No quiz results found yet. Take your first test to start tracking progress.</p>
              <Button href="/quiz/test" class="mt-4" variant="outline">Start a quiz</Button>
            </div>
          </template>

          <template x-if="results.length > 0">
            <div class="grid gap-4">
              <template x-for="result in results" :key="`result-${result.id}`">
                <article class="flex flex-col gap-4 rounded-2xl border border-slate-200 bg-slate-50 p-5 shadow-sm">
                  <div class="flex flex-col gap-3 sm:flex-row sm:items-center sm:justify-between">
                    <div>
                      <p class="text-xs font-semibold uppercase tracking-wide text-slate-400">
                        Attempt #
                        <span x-text="result.id"></span>
                      </p>
                      <h2 class="text-lg font-semibold text-slate-900">
                        Score:
                        <span x-text="`${result.mark} / ${result.totalQuestions}`"></span>
                      </h2>
                      <p class="text-sm text-slate-500">
                        Taken on <span x-text="result.createdAtLabel"></span>
                      </p>
                    </div>
                    <div class="flex flex-wrap items-center gap-2 text-xs font-semibold text-slate-500">
                      <span class="inline-flex items-center gap-2 rounded-full bg-slate-200 px-3 py-1">
                        <i class="fas fa-signal text-[10px] text-slate-600"></i>
                        <span x-text="result.level ?? '—'"></span>
                      </span>
                      <span class="inline-flex items-center gap-2 rounded-full bg-slate-200 px-3 py-1">
                        <i class="fas fa-circle-dot text-[10px] text-slate-600"></i>
                        <span x-text="`${result.totalQuestions} questions`"></span>
                      </span>
                    </div>
                  </div>
                  <div class="flex flex-wrap items-center justify-between gap-3">
                    <p class="text-sm text-slate-500">
                      Platform <span x-text="result.platformName"></span> · Subject <span x-text="result.subjectName"></span> · Topic
                      <span x-text="result.topicName"></span> · Roadmap <span x-text="result.roadmapName"></span>
                    </p>
                    <div class="flex flex-wrap items-center gap-2">
                      <Button size="sm" variant="ghost" x-on:click="selected = result; modalOpen = true">
                        View answers
                      </Button>
                    </div>
                  </div>
                </article>
              </template>
            </div>
          </template>

          {pagination.totalPages > 1 && (
            <nav class="flex flex-wrap items-center justify-between gap-3 pt-4 text-sm text-slate-600">
              <div>
                Page {pagination.page} of {pagination.totalPages}
              </div>
              <div class="flex flex-wrap items-center gap-2">
                {pagination.hasPreviousPage ? (
                  <a
                    class="inline-flex items-center rounded-full border border-slate-200 px-3 py-1.5 text-xs font-semibold text-slate-600 hover:border-slate-300 hover:text-slate-800"
                    href={`?page=${pagination.page - 1}`}
                  >
                    Previous
                  </a>
                ) : (
                  <span class="inline-flex items-center rounded-full border border-slate-100 px-3 py-1.5 text-xs text-slate-300">
                    Previous
                  </span>
                )}
                {pageNumbers.map((item) =>
                  item === "ellipsis" ? (
                    <span class="px-2 text-sm text-slate-400">…</span>
                  ) : (
                    <a
                      class={`inline-flex h-8 w-8 items-center justify-center rounded-full text-xs font-semibold transition ${
                        item === pagination.page
                          ? "bg-indigo-600 text-white"
                          : "border border-slate-200 text-slate-600 hover:border-indigo-200 hover:text-indigo-600"
                      }`}
                      href={`?page=${item}`}
                    >
                      {item}
                    </a>
                  ),
                )}
                {pagination.hasNextPage ? (
                  <a
                    class="inline-flex items-center rounded-full border border-slate-200 px-3 py-1.5 text-xs font-semibold text-slate-600 hover:border-slate-300 hover:text-slate-800"
                    href={`?page=${pagination.page + 1}`}
                  >
                    Next
                  </a>
                ) : (
                  <span class="inline-flex items-center rounded-full border border-slate-100 px-3 py-1.5 text-xs text-slate-300">
                    Next
                  </span>
                )}
              </div>
            </nav>
          )}
        </div>
        <ResultView openExpr="modalOpen" resultExpr="selected" onCloseExpr="modalOpen = false; " />
      </div>
    </section>
  </main>
</Layout>
