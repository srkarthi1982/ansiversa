---
import SectionHeading from '../../../components/SectionHeading.astro';
import Button from '../../../components/Button.astro';
import { getBriefKnobs } from '../data/creativeTitleMakerData';

const knobs = getBriefKnobs();
---
<section
  id="creative-title-brief"
  class="border-t border-slate-200 bg-white py-16"
  x-data="() => ({
    maker: $store.creativeTitleMaker,
    assetTypes: $store.creativeTitleMaker.assetTypeOptions,
    toneOptions: $store.creativeTitleMaker.toneOptions,
    povOptions: $store.creativeTitleMaker.povOptions,
    deviceOptions: $store.creativeTitleMaker.deviceOptions,
    localSyllables: $store.creativeTitleMaker.state.brief.syllableTarget ?? 22,
  })"
>
  <div class="mx-auto max-w-6xl px-4 sm:px-6 lg:px-8">
    <div class="flex flex-col gap-6 lg:flex-row lg:items-end lg:justify-between">
      <SectionHeading
        eyebrow="Brief & controls"
        title="Dial in the brief before generating variants"
        description="Pick the asset type, tone, keyword rules, and stylistic devices that will guide each batch of titles."
      />
      <div class="flex items-center gap-3 text-xs text-slate-500">
        <span class="inline-flex items-center gap-2 rounded-full bg-slate-100 px-3 py-1 font-semibold text-slate-600">
          <i class="fas fa-bolt text-[10px] text-indigo-500"></i>
          Ctrl/Cmd + Enter — generate
        </span>
        <span class="inline-flex items-center gap-2 rounded-full bg-slate-100 px-3 py-1 font-semibold text-slate-600">
          <i class="fas fa-dot-circle text-[10px] text-indigo-500"></i>
          Ctrl/Cmd + . — cycle bucket
        </span>
      </div>
    </div>

    <div class="mt-12 grid gap-10 lg:grid-cols-[1.05fr_0.95fr]">
      <div class="space-y-8">
        <article class="rounded-3xl border border-slate-200 bg-white p-6 shadow-soft">
          <header class="flex flex-wrap items-center justify-between gap-4">
            <div>
              <h2 class="text-xl font-semibold text-slate-900">Creative brief</h2>
              <p class="text-sm text-slate-600">Define the constraints so your variants are ready-to-ship.</p>
            </div>
            <Button size="sm" variant="ghost" class="rounded-full !px-4" @click="maker.toggleSeoMode()">
              <i class="fas fa-shield-halved text-xs text-indigo-500"></i>
              <span x-text="maker.state.brief.seoMode ? 'Disable SEO mode' : 'Enable SEO mode'"></span>
            </Button>
          </header>

          <div class="mt-6 grid gap-6 md:grid-cols-2">
            <label class="block">
              <span class="text-sm font-semibold text-slate-700">Asset type</span>
              <select
                class="mt-2 w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm shadow-sm focus:border-indigo-500 focus:outline-none focus:ring-2 focus:ring-indigo-500"
                x-model="maker.state.brief.assetType"
                @change="maker.setAssetType($event.target.value)"
              >
                <template x-for="option in assetTypes" :key="option.id">
                  <option :value="option.id" x-text="option.label"></option>
                </template>
              </select>
              <p
                class="mt-2 text-xs text-slate-500"
                x-text="(assetTypes.find((item) => item.id === maker.state.brief.assetType) || {}).hint"
              ></p>
            </label>

            <label class="block">
              <span class="text-sm font-semibold text-slate-700">Audience</span>
              <input
                type="text"
                class="mt-2 w-full rounded-2xl border border-slate-200 bg-slate-50 px-4 py-3 text-sm shadow-sm focus:border-indigo-500 focus:outline-none focus:ring-2 focus:ring-indigo-500"
                placeholder="Launch marketing leads, community, investors"
                x-model="maker.state.brief.audience"
                @input="maker.setAudience($event.target.value)"
              />
            </label>

            <label class="block">
              <span class="text-sm font-semibold text-slate-700">Primary keyword</span>
              <input
                type="text"
                class="mt-2 w-full rounded-2xl border border-slate-200 bg-slate-50 px-4 py-3 text-sm shadow-sm focus:border-indigo-500 focus:outline-none focus:ring-2 focus:ring-indigo-500"
                placeholder="Ansiversa"
                x-model="maker.state.brief.primaryKeyword"
                @input="maker.setKeyword($event.target.value)"
              />
              <p class="mt-1 text-xs text-slate-500">Keyword must appear within first 60 characters when SEO mode is on.</p>
            </label>

            <label class="block">
              <span class="text-sm font-semibold text-slate-700">Secondary keyword (optional)</span>
              <input
                type="text"
                class="mt-2 w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm shadow-sm focus:border-indigo-500 focus:outline-none focus:ring-2 focus:ring-indigo-500"
                placeholder="creative title maker"
                x-model="maker.state.brief.secondaryKeyword"
                @input="maker.setSecondaryKeyword($event.target.value)"
              />
            </label>

            <label class="block">
              <span class="text-sm font-semibold text-slate-700">Tone preset</span>
              <select
                class="mt-2 w-full rounded-2xl border border-slate-200 bg-white px-4 py-3 text-sm shadow-sm focus:border-indigo-500 focus:outline-none focus:ring-2 focus:ring-indigo-500"
                x-model="maker.state.brief.tone"
                @change="maker.setTone($event.target.value)"
              >
                <template x-for="tone in toneOptions" :key="tone.id">
                  <option :value="tone.id" x-text="tone.label"></option>
                </template>
              </select>
              <p
                class="mt-2 text-xs text-slate-500"
                x-text="(toneOptions.find((tone) => tone.id === maker.state.brief.tone) || {}).description"
              ></p>
            </label>

            <fieldset class="block">
              <legend class="text-sm font-semibold text-slate-700">Point of view</legend>
              <div class="mt-3 flex flex-wrap gap-3">
                <template x-for="pov in povOptions" :key="pov.id">
                  <button
                    type="button"
                    class="inline-flex items-center gap-2 rounded-full px-4 py-2 text-sm font-semibold transition"
                    :class="maker.state.brief.pov === pov.id
                      ? 'bg-indigo-600 text-white shadow-sm'
                      : 'bg-slate-100 text-slate-600 shadow-sm hover:-translate-y-0.5'"
                    @click.prevent="maker.setPov(pov.id)"
                  >
                    <i class="fas fa-user-pen text-xs"></i>
                    <span x-text="pov.label"></span>
                  </button>
                </template>
              </div>
              <p
                class="mt-2 text-xs text-slate-500"
                x-text="(povOptions.find((item) => item.id === maker.state.brief.pov) || {}).description"
              ></p>
            </fieldset>

            <div class="grid gap-3 md:grid-cols-2">
              <div class="rounded-2xl border border-slate-200 bg-slate-50 p-4 shadow-inner">
                <p class="text-xs font-semibold uppercase tracking-wide text-slate-500">Length guardrails</p>
                <p class="mt-2 text-sm text-slate-700">
                  Max characters <span class="font-semibold" x-text="maker.state.brief.maxChars"></span>
                </p>
                <p class="text-xs text-slate-500">
                  Soft cap words <span class="font-semibold" x-text="maker.state.brief.maxWords"></span>
                </p>
                <label class="mt-3 block text-xs font-semibold text-slate-600">
                  Target syllables
                  <input
                    type="range"
                    min="12"
                    max="28"
                    step="1"
                    class="mt-2 w-full"
                    x-model.number="localSyllables"
                    @input="maker.setSyllableTarget(Number(localSyllables))"
                  />
                  <span class="mt-1 inline-flex items-center gap-2 rounded-full bg-white px-3 py-1 text-[11px] font-semibold text-slate-600">
                    <i class="fas fa-wave-square text-[10px] text-indigo-500"></i>
                    <span x-text="`${maker.state.brief.syllableTarget ?? localSyllables} syllables`"></span>
                  </span>
                </label>
              </div>
              <div class="rounded-2xl border border-slate-200 bg-white p-4 shadow-sm">
                <p class="text-xs font-semibold uppercase tracking-wide text-slate-500">Locale & keyword placement</p>
                <label class="mt-3 flex items-center gap-3 text-sm text-slate-600">
                  <input
                    type="checkbox"
                    class="h-4 w-4 rounded border-slate-300 text-indigo-600 focus:ring-indigo-500"
                    x-model="maker.state.brief.includeKeywordFront"
                  />
                  Front-load primary keyword
                </label>
                <label class="mt-3 block text-sm font-semibold text-slate-700">
                  Locale
                  <select
                    class="mt-2 w-full rounded-2xl border border-slate-200 bg-white px-4 py-2 text-sm shadow-sm focus:border-indigo-500 focus:outline-none focus:ring-2 focus:ring-indigo-500"
                    x-model="maker.state.brief.locale"
                    @change="maker.setLocale($event.target.value)"
                  >
                    <option value="en-US">English (US)</option>
                    <option value="en-GB">English (UK)</option>
                    <option value="es-ES">Spanish (Spain)</option>
                    <option value="pt-BR">Portuguese (Brazil)</option>
                    <option value="de-DE">German</option>
                  </select>
                </label>
                <p class="mt-2 text-xs text-slate-500">
                  <span class="font-semibold">SERP guardrail:</span>
                  keyword appears within first 60 chars. Secondary keywords appended when safe.
                </p>
              </div>
            </div>
          </div>

          <div class="mt-8">
            <p class="text-sm font-semibold text-slate-700">Stylistic devices</p>
            <div class="mt-3 flex flex-wrap gap-3">
              <template x-for="device in deviceOptions" :key="device.id">
                <button
                  type="button"
                  class="inline-flex items-center gap-2 rounded-full px-4 py-2 text-sm font-semibold shadow-sm transition"
                  :class="maker.state.brief.devices.includes(device.id)
                    ? 'bg-indigo-600 text-white shadow-lg shadow-indigo-500/30'
                    : 'bg-slate-100 text-slate-600 hover:-translate-y-0.5'"
                  @click.prevent="maker.toggleDevice(device.id)"
                >
                  <i :class="`${device.icon} text-xs`"></i>
                  <span x-text="device.label"></span>
                </button>
              </template>
            </div>
          </div>
        </article>

        <article class="rounded-3xl border border-slate-200 bg-slate-50 p-6 shadow-inner">
          <h3 class="text-lg font-semibold text-slate-900">Generator knobs at a glance</h3>
          <p class="mt-2 text-sm text-slate-600">
            Creative Title Maker keeps your critical constraints visible before you click generate. Hover for details or pin
            your defaults in settings.
          </p>
          <ul class="mt-6 grid gap-4 md:grid-cols-2">
            {knobs.map((knob) => (
              <li key={knob.id} class="rounded-2xl border border-white/70 bg-white/80 p-4 shadow-sm">
                <div class="flex items-center gap-3 text-sm font-semibold text-slate-900">
                  <i class={`${knob.icon} text-indigo-500 text-xs`}></i>
                  {knob.label}
                </div>
                <p class="mt-2 text-xs text-slate-600">{knob.description}</p>
                {knob.id === 'seo' && (
                  <p class="mt-2 inline-flex items-center gap-2 rounded-full bg-indigo-50 px-3 py-1 text-[11px] font-semibold text-indigo-600">
                    <i class="fas fa-shield-check text-[10px]"></i>
                    <span x-text="maker.seoGuardrailSummary"></span>
                  </p>
                )}
              </li>
            ))}
          </ul>
        </article>
      </div>

      <aside class="space-y-6">
        <article class="rounded-3xl border border-slate-200 bg-white p-6 shadow-soft">
          <h3 class="text-lg font-semibold text-slate-900">Workspace metrics</h3>
          <p class="mt-1 text-sm text-slate-600">Live counters update as you generate, curate, and export packs.</p>
          <div class="mt-4 space-y-4">
            <template x-for="metric in maker.state.metrics" :key="metric.id">
              <div class="rounded-2xl border border-slate-200 bg-slate-50/80 p-4 shadow-sm">
                <div class="flex items-center justify-between gap-3">
                  <div>
                    <p class="text-sm font-semibold text-slate-900" x-text="metric.label"></p>
                    <p class="text-xs text-slate-500" x-text="metric.detail"></p>
                  </div>
                  <span class="inline-flex h-10 w-10 items-center justify-center rounded-full bg-indigo-100 text-indigo-600">
                    <i class="fas" :class="metric.icon"></i>
                  </span>
                </div>
                <div class="mt-3 flex items-center justify-between text-sm font-semibold text-slate-900">
                  <span x-text="metric.value"></span>
                  <span class="text-xs font-semibold text-emerald-600" x-text="metric.trend"></span>
                </div>
              </div>
            </template>
          </div>
        </article>

        <article class="rounded-3xl border border-indigo-100 bg-indigo-50 p-6 shadow-sm">
          <h3 class="text-lg font-semibold text-indigo-900">Plan-aware guardrails</h3>
          <p class="mt-1 text-sm text-indigo-800">
            Toggle plan tiers to see how Creative Title Maker scales with Ansiversa subscriptions.
          </p>
          <div class="mt-4 flex gap-3">
            <button
              type="button"
              class="flex-1 rounded-2xl px-4 py-2 text-sm font-semibold transition"
              :class="maker.state.plan === 'free' ? 'bg-white text-indigo-700 shadow' : 'bg-indigo-100/80 text-indigo-700'"
              @click="maker.setPlan('free')"
            >
              Free
            </button>
            <button
              type="button"
              class="flex-1 rounded-2xl px-4 py-2 text-sm font-semibold transition"
              :class="maker.state.plan === 'pro' ? 'bg-white text-indigo-700 shadow' : 'bg-indigo-100/80 text-indigo-700'"
              @click="maker.setPlan('pro')"
            >
              Pro
            </button>
          </div>
          <dl class="mt-4 space-y-3 text-sm text-indigo-900">
            <template x-for="(value, key) in maker.state.planLimits[maker.state.plan]" :key="key">
              <div class="flex items-start justify-between gap-4 rounded-2xl bg-white/80 px-3 py-2">
                <dt class="font-semibold capitalize" x-text="key.replace(/([A-Z])/g, ' $1')"></dt>
                <dd class="text-right" x-text="Array.isArray(value) ? value.join(', ') : value"></dd>
              </div>
            </template>
          </dl>
        </article>
      </aside>
    </div>
  </div>
</section>
