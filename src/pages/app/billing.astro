---
import Layout from "../../layouts/Layout.astro";
import Button from "../../components/Button.astro";
import {
  listActivePlans,
  findCustomerForUser,
  findLatestSubscriptionForCustomer,
  normalizeSubscription,
  isSubscriptionActive,
} from "../../actions/billing/utils";

export const prerender = false;

const user = Astro.locals.user ?? null;
const plans = await listActivePlans();

let activePlanSlug = user?.plan ?? null;
let subscription: ReturnType<typeof normalizeSubscription> | null = null;
let subscriptionIsActive = false;
let customer: Awaited<ReturnType<typeof findCustomerForUser>> = null;

if (user) {
  customer = await findCustomerForUser(user.id);
  if (customer) {
    const subscriptionRow = await findLatestSubscriptionForCustomer(customer.id);
    if (subscriptionRow) {
      subscription = normalizeSubscription(subscriptionRow);
      subscriptionIsActive = isSubscriptionActive(subscriptionRow);
      if (subscriptionRow.planId) {
        const plan = plans.find((item) => item.id === subscriptionRow.planId);
        if (plan?.slug) {
          activePlanSlug = plan.slug;
        }
      }
    }
  }
}

const formatPrice = (amount: number, currency: string, interval: string) => {
  const unit = amount / 100;
  const formatted = new Intl.NumberFormat('en-US', {
    style: 'currency',
    currency: currency.toUpperCase(),
    minimumFractionDigits: unit % 1 === 0 ? 0 : 2,
  }).format(unit);

  if (interval === 'one_time') {
    return formatted;
  }
  if (interval === 'year') {
    return `${formatted}/year`;
  }
  if (interval === 'week') {
    return `${formatted}/week`;
  }
  if (interval === 'day') {
    return `${formatted}/day`;
  }
  return `${formatted}/month`;
};
---

<Layout>
  <main class="bg-slate-50 min-h-screen pb-16">
    <section class="border-b border-slate-200 bg-white/80 backdrop-blur">
      <div class="mx-auto max-w-5xl px-4 py-12 sm:px-6 lg:px-8">
        <h1 class="text-4xl font-bold tracking-tight text-slate-900 sm:text-5xl">Billing & subscriptions</h1>
        <p class="mt-3 max-w-3xl text-base text-slate-600">
          Manage your Ansiversa membership, review invoices, and jump into the Stripe portal for receipts or payment method updates.
        </p>
        {user ? (
          <div class="mt-6 inline-flex items-center gap-3 rounded-full border border-slate-200 bg-slate-100 px-4 py-2 text-sm font-medium text-slate-700">
            <span class="inline-flex h-2 w-2 rounded-full bg-emerald-500"></span>
            <span>
              Signed in as <strong>{user.email}</strong>
              {activePlanSlug ? ` â€¢ Current plan: ${activePlanSlug}` : ''}
            </span>
          </div>
        ) : (
          <div class="mt-6 inline-flex items-center gap-2 rounded-full border border-amber-200 bg-amber-50 px-4 py-2 text-sm font-medium text-amber-700">
            <span class="inline-flex h-2 w-2 rounded-full bg-amber-500"></span>
            <span>Sign in to upgrade your workspace and access billing.</span>
          </div>
        )}
      </div>
    </section>

    <section class="mx-auto flex w-full max-w-5xl flex-col gap-8 px-4 py-12 sm:px-6 lg:px-8">
      <div class="grid gap-6 md:grid-cols-2">
        {plans.map((plan) => {
          const isActive = activePlanSlug && plan.slug === activePlanSlug;
          const isCurrent = subscriptionIsActive && isActive;
          return (
            <div class={`relative flex h-full flex-col rounded-2xl border ${isActive ? 'border-indigo-400 bg-white shadow-lg ring-2 ring-indigo-200' : 'border-slate-200 bg-white shadow-sm'}`}>
              {isCurrent ? (
                <span class="absolute -translate-y-1/2 rounded-full bg-indigo-600 px-3 py-1 text-xs font-semibold uppercase tracking-wide text-white">
                  Active
                </span>
              ) : null}
              <div class="flex flex-1 flex-col p-6">
                <div class="flex items-baseline justify-between gap-3">
                  <div>
                    <h2 class="text-lg font-semibold text-slate-900">{plan.name}</h2>
                    <p class="mt-1 text-sm text-slate-500">{plan.description || 'Flexible access to Ansiversa mini-apps.'}</p>
                  </div>
                  <div class="text-right">
                    <p class="text-2xl font-bold text-slate-900">{formatPrice(plan.amount, plan.currency, plan.interval)}</p>
                    <p class="text-xs uppercase tracking-wide text-slate-400">Billed via Stripe</p>
                  </div>
                </div>
                {plan.features.length ? (
                  <ul class="mt-6 space-y-2 text-sm text-slate-600">
                    {plan.features.map((feature) => (
                      <li class="flex items-start gap-2">
                        <span class="mt-1 inline-flex h-1.5 w-1.5 flex-shrink-0 rounded-full bg-indigo-500"></span>
                        <span>{feature}</span>
                      </li>
                    ))}
                  </ul>
                ) : null}
                <div class="mt-auto pt-6">
                  {isCurrent ? (
                    <Button
                      variant="secondary"
                      size="md"
                      block
                      disabled={!user}
                      data-portal
                      data-plan={plan.slug}
                    >
                      Manage in Stripe
                    </Button>
                  ) : (
                    <Button
                      variant={isActive ? 'secondary' : 'primary'}
                      size="md"
                      block
                      disabled={!user}
                      data-checkout
                      data-plan={plan.slug}
                    >
                      {isActive ? 'Resume membership' : 'Upgrade with Stripe'}
                    </Button>
                  )}
                  <p class="mt-3 text-xs text-slate-400">
                    You will be redirected to a secure Stripe checkout to complete the purchase.
                  </p>
                </div>
              </div>
            </div>
          );
        })}
      </div>

      <div class="rounded-2xl border border-slate-200 bg-white p-6 shadow-sm">
        <div class="flex flex-wrap items-center justify-between gap-4">
          <div>
            <h3 class="text-lg font-semibold text-slate-900">Billing portal</h3>
            <p class="mt-1 text-sm text-slate-500">
              Update payment methods, download invoices, or cancel your subscription anytime using Stripe Billing.
            </p>
          </div>
          <Button
            variant="outline"
            size="md"
            data-portal
            disabled={!subscriptionIsActive || !user}
          >
            Open Stripe portal
          </Button>
        </div>
        {!subscriptionIsActive ? (
          <p class="mt-4 rounded-xl border border-dashed border-slate-300 bg-slate-50 px-4 py-3 text-sm text-slate-500">
            Activate a paid membership to unlock the customer portal. We surface it automatically once Stripe confirms your subscription.
          </p>
        ) : null}
      </div>
    </section>
  </main>

  <script type="module">
    const setLoading = (button, loading) => {
      if (!button) return;
      if (loading) {
        button.dataset.loading = 'true';
        button.dataset.wasDisabled = button.disabled ? 'true' : 'false';
        button.disabled = true;
        button.classList.add('opacity-70');
      } else {
        delete button.dataset.loading;
        button.classList.remove('opacity-70');
        if (button.dataset.wasDisabled !== 'true') {
          button.disabled = false;
        }
        delete button.dataset.wasDisabled;
      }
    };

    const notify = (message) => {
      if ('toast' in window && typeof window.toast === 'function') {
        window.toast(message);
        return;
      }
      alert(message);
    };

    document.querySelectorAll('[data-checkout]').forEach((button) => {
      button.addEventListener('click', async () => {
        const plan = button.getAttribute('data-plan');
        if (!plan) return;
        setLoading(button, true);
        try {
          const response = await fetch('/api/billing/checkout', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({ planSlug: plan }),
          });

          const payload = await response.json();
          if (!response.ok || !payload?.success) {
            const message = payload?.error?.message ?? 'Unable to start Stripe checkout. Please try again.';
            notify(message);
            return;
          }

          const url = payload.data?.url;
          if (url) {
            window.location.href = url;
          } else {
            notify('Stripe did not return a checkout URL. Contact support if this continues.');
          }
        } catch (error) {
          console.error(error);
          notify('Unexpected error while starting checkout.');
        } finally {
          setLoading(button, false);
        }
      });
    });

    document.querySelectorAll('[data-portal]').forEach((button) => {
      button.addEventListener('click', async () => {
        setLoading(button, true);
        try {
          const response = await fetch('/api/billing/portal', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({}),
          });
          const payload = await response.json();
          if (!response.ok || !payload?.success) {
            const message = payload?.error?.message ?? 'Unable to open the Stripe portal right now.';
            notify(message);
            return;
          }
          const url = payload.data?.url;
          if (url) {
            window.location.href = url;
          } else {
            notify('Stripe returned an invalid portal URL.');
          }
        } catch (error) {
          console.error(error);
          notify('Unexpected error while opening the billing portal.');
        } finally {
          setLoading(button, false);
        }
      });
    });
  </script>
</Layout>
