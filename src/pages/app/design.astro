---
import { Fragment } from "astro/jsx-runtime";
import Layout from "../../layouts/Layout.astro";
import Breadcrumb from "../../components/Breadcrumb.astro";
import Button from "../../components/Button.astro";
import DataGrid from "../../components/DataGrid.astro";
import Dropdown from "../../components/Dropdown.astro";
import FeatureCard from "../../components/FeatureCard.astro";
import HeroSection from "../../components/HeroSection.astro";
import Modal from "../../components/Modal.astro";
import PaginationControls from "../../components/PaginationControls.astro";
import Password from "../../components/Password.astro";
import PricingTierCard from "../../components/PricingTierCard.astro";
import SectionHeading from "../../components/SectionHeading.astro";
import Textbox from "../../components/Textbox.astro";
import VariantCard from "../../components/caption/VariantCard.astro";
import type { CaptionPlatform, CaptionVariant } from "../../types/caption";

const dataGridColumns = [
  {
    key: "actions",
    label: "",
    align: "center" as const,
    widthClass: "w-14",
    filter: {
      type: "button" as const,
      label: "Reset",
      onClick: "grid.clearFilters()",
      variant: "neutral" as const,
    },
  },
  {
    key: "name",
    label: "Document",
    sortable: true,
    filter: { type: "text" as const, key: "name", placeholder: "Search name" },
  },
  {
    key: "status",
    label: "Status",
    sortable: true,
    align: "center" as const,
    widthClass: "w-32",
    filter: {
      type: "select" as const,
      key: "status",
      options: [
        { label: "All statuses", value: "all" },
        { label: "Draft", value: "draft" },
        { label: "Published", value: "published" },
      ],
    },
  },
  {
    key: "updatedAt",
    label: "Last updated",
    sortable: true,
  },
];

const dataGridRows = [
  {
    id: "prop-001",
    name: "Website redesign proposal",
    status: "draft",
    updatedAt: "2 days ago",
    summary: "Conversion-focused redesign with modular content sections.",
  },
  {
    id: "resume-142",
    name: "Product designer resume",
    status: "published",
    updatedAt: "1 hour ago",
    summary: "Latest case studies, metrics, and skill highlights.",
  },
  {
    id: "contract-019",
    name: "Brand retainer contract",
    status: "draft",
    updatedAt: "5 days ago",
    summary: "Monthly retainer agreement with service-level clauses.",
  },
];

const gridDemoState = `
{
  grid: {
    rows: ${JSON.stringify(dataGridRows)},
    loading: false,
    error: null,
    filters: { status: 'all', name: '' },
    hasActiveFilters: false,
    sort: { column: 'updatedAt', direction: 'desc' },
    pageSize: 5,
    page: 1,
    totalItems: ${dataGridRows.length},
    totalPages: 1,
    pageNumbers: [1],
    prevPage() { if (this.page > 1) { this.page -= 1; } },
    nextPage() { if (this.page < this.totalPages) { this.page += 1; } },
    setPage(page) { if (typeof page === 'number' && page >= 1 && page <= this.totalPages) { this.page = page; } },
    firstPage() { this.page = 1; },
    lastPage() { this.page = this.totalPages; },
    setPageSize(size) { this.pageSize = size; },
    setSort(column) {
      if (this.sort.column === column) {
        this.sort.direction = this.sort.direction === 'asc' ? 'desc' : 'asc';
      } else {
        this.sort = { column, direction: 'asc' };
      }
    },
    onFilterChange(key, value) {
      this.filters = { ...this.filters, [key]: value };
      this.hasActiveFilters = Object.values(this.filters).some((value) => value && value !== 'all');
    },
    clearFilters() {
      this.filters = { status: 'all', name: '' };
      this.hasActiveFilters = false;
    },
  }
}
`;

const featureHighlights = [
  {
    eyebrow: "Design language",
    title: "Reusable building blocks",
    description:
      "Every component shares spacing, typography, and motion primitives so product experiences feel cohesive by default.",
    icon: "fas fa-layer-group",
  },
  {
    eyebrow: "Stateful by default",
    title: "Polished interactions",
    description:
      "Accessibility, hover, focus, and loading states are baked in—ship better UI without rewiring the basics.",
    icon: "fas fa-wand-magic-sparkles",
  },
  {
    eyebrow: "Composable",
    title: "Slot-friendly architecture",
    description:
      "Slot-based APIs let you inject product-specific UI while keeping shared shells untouched and upgradeable.",
    icon: "fas fa-puzzle-piece",
  },
];

const pricingTiers = [
  {
    name: "Starter",
    price: "$0",
    priceSuffix: "/month",
    description: "Core AI workspace features for solo builders trying Ansiversa on for size.",
    ctaLabel: "Get started",
    ctaHref: "#",
    features: ["Unlimited drafts", "Email composer", "Community templates"],
  },
  {
    name: "Pro",
    price: "$39",
    priceSuffix: "/month",
    description: "Unlock collaboration, publishing workflows, and premium automation actions.",
    ctaLabel: "Upgrade to Pro",
    ctaHref: "#",
    features: ["Brand workspaces", "Shareable links", "Automations", "Priority support"],
    featured: true,
  },
  {
    name: "Studio",
    price: "Let's chat",
    description: "Custom onboarding, dedicated support, and bespoke integrations for teams at scale.",
    ctaLabel: "Contact sales",
    ctaHref: "#",
    features: ["Dedicated manager", "Advanced analytics", "Custom integrations"],
  },
];

const captionDemoPlatform: CaptionPlatform = {
  id: "insta",
  name: "Instagram",
  icon: "fab fa-instagram",
  limit: 2200,
  recommendedHashtags: "#design #ansiversa",
  description: "Visual storytelling with micro-copy that sticks.",
  usageNotes: [
    "Lead with a hook in the first sentence.",
    "Keep the tone conversational and warm.",
  ],
};

const captionDemoVariant: CaptionVariant = {
  id: "demo-variant",
  platformId: "insta",
  title: "Design sprint recap",
  text:
    "Deadline sprinted toward us? We wrapped day four with a high-fidelity prototype and ten user interviews to boot. Swipe to see the before/after.",
  hashtags: ["designsprint", "ux", "ansiversa"],
  language: "en",
  counters: {
    characters: 196,
    remaining: 2004,
    hashtags: 3,
  },
  compliance: [
    {
      id: "tone",
      severity: "info",
      message: "Matches the account voice (friendly, confident).",
    },
  ],
  score: {
    clarity: 9,
    punch: 8,
    compliance: 10,
  },
  createdAt: new Date().toISOString(),
  updatedAt: new Date().toISOString(),
};

const paginationDemoPages = [1, 2, 3, 4, "…", 12];

const paginationDemoState = `
{
  pager: {
    loading: false,
    page: 3,
    totalPages: 12,
    pageNumbers: ${JSON.stringify(paginationDemoPages)},
    totalItems: 240,
    pageSize: 20,
    prevPage() { if (this.page > 1) { this.page -= 1; } },
    nextPage() { if (this.page < this.totalPages) { this.page += 1; } },
    setPage(page) { if (typeof page === 'number') { this.page = page; } },
    firstPage() { this.page = 1; },
    lastPage() { this.page = this.totalPages; }
  }
}
`;
---
<Layout>
  <main class="bg-slate-950 text-white">
    <HeroSection
      eyebrow="Design System"
      title="Ansiversa component catalog"
      description="A reference playground showcasing every shared UI building block used across our product. Reuse these components to keep features consistent and fast to ship."
      background="bg-slate-950 text-white"
      padding="py-16"
    >
      <Fragment slot="actions">
        <Button variant="primary">View usage guidelines</Button>
        <Button variant="outline">Copy code sample</Button>
      </Fragment>
    </HeroSection>

    <section class="rounded-t-[44px] bg-white py-16 text-slate-900">
      <div class="mx-auto flex max-w-5xl flex-col gap-16 px-4 sm:px-6 lg:px-8">
        <article id="component-breadcrumb" class="space-y-6">
          <div class="space-y-2">
            <p class="text-xs font-semibold uppercase tracking-[0.35em] text-indigo-500">Component</p>
            <h2 class="text-3xl font-bold tracking-tight">Breadcrumb</h2>
            <p class="text-sm text-slate-600">
              Automatic breadcrumb trail based on the current route. Keeps navigation consistent without manual wiring.
            </p>
          </div>
          <div class="overflow-hidden rounded-2xl border border-slate-200 bg-slate-50">
            <Breadcrumb />
          </div>
        </article>

        <div class="border-t border-slate-200"></div>

        <article id="component-section-heading" class="space-y-6">
          <div class="space-y-2">
            <p class="text-xs font-semibold uppercase tracking-[0.35em] text-indigo-500">Component</p>
            <h2 class="text-3xl font-bold tracking-tight">Section Heading</h2>
            <p class="text-sm text-slate-600">
              Rich heading block with eyebrow, headline, description, and alignment controls for feature sections.
            </p>
          </div>
          <div class="rounded-2xl border border-slate-200 bg-white p-6 shadow-sm">
            <SectionHeading
              eyebrow="Release notes"
              title="Showcase updates with clarity"
              description="Combine eyebrow copy and descriptive body text to set context before introducing supporting components."
              align="center"
            >
              <div class="mt-6 flex justify-center gap-3">
                <Button variant="secondary">Preview section</Button>
                <Button variant="outline">Copy markup</Button>
              </div>
            </SectionHeading>
          </div>
        </article>

        <div class="border-t border-slate-200"></div>

        <article id="component-button" class="space-y-6">
          <div class="space-y-2">
            <p class="text-xs font-semibold uppercase tracking-[0.35em] text-indigo-500">Component</p>
            <h2 class="text-3xl font-bold tracking-tight">Button</h2>
            <p class="text-sm text-slate-600">
              Primary call-to-action button with size and variant controls for inline links or form submits.
            </p>
          </div>
          <div class="flex flex-wrap items-center gap-3">
            <Button variant="primary">Primary</Button>
            <Button variant="secondary">Secondary</Button>
            <Button variant="outline">Outline</Button>
            <Button variant="ghost">Ghost</Button>
            <Button variant="light">Light</Button>
            <Button variant="tinted">Tinted</Button>
            <Button size="lg">Large</Button>
            <Button size="sm">Small</Button>
          </div>
        </article>

        <div class="border-t border-slate-200"></div>

        <article id="component-dropdown" class="space-y-6">
          <div class="space-y-2">
            <p class="text-xs font-semibold uppercase tracking-[0.35em] text-indigo-500">Component</p>
            <h2 class="text-3xl font-bold tracking-tight">Dropdown</h2>
            <p class="text-sm text-slate-600">
              Accessible Alpine-powered dropdown with configurable alignment and custom trigger slots.
            </p>
          </div>
          <div class="flex flex-wrap items-center gap-6">
            <Dropdown triggerClass="inline-flex items-center gap-2 rounded-full border border-slate-200 bg-white px-4 py-2 text-sm font-semibold text-slate-700 hover:border-slate-300 hover:text-slate-900" panelWidthClass="w-56">
              <span slot="trigger">Team shortcuts</span>
              <a class="block px-4 py-2 text-slate-600 hover:bg-slate-100" href="#">Profile</a>
              <a class="block px-4 py-2 text-slate-600 hover:bg-slate-100" href="#">Settings</a>
              <Button
                type="button"
                variant="ghost"
                block
              >
                Sign out
              </Button>
            </Dropdown>
            <Dropdown align="stretch" triggerClass="inline-flex items-center justify-between gap-3 rounded-lg border border-slate-200 bg-white px-4 py-2 text-sm font-semibold text-slate-700 hover:border-slate-300 hover:text-slate-900" panelClass="top-12" panelWidthClass="w-full" wrapperClass="w-64">
              <span slot="trigger" class="flex w-full items-center justify-between gap-3">
                <span class="flex items-center gap-2 text-sm font-semibold text-slate-700">
                  <span class="inline-flex h-8 w-8 items-center justify-center rounded-full bg-indigo-500/10 text-indigo-600">AI</span>
                  Automation
                </span>
                <svg class="h-4 w-4 text-slate-400" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" d="m6 9 6 6 6-6" />
                </svg>
              </span>
              <div class="px-4 pb-2 pt-3 text-xs font-semibold uppercase tracking-wide text-slate-400">Categories</div>
              <Button
                type="button"
                variant="ghost"
                block
              >
                <span class="h-2 w-2 rounded-full bg-emerald-400"></span>
                Launch ready
              </Button>
              <Button
                type="button"
                variant="ghost"
                block
              >
                <span class="h-2 w-2 rounded-full bg-indigo-400"></span>
                Needs review
              </Button>
              <Button
                type="button"
                variant="ghost"
                block
              >
                <span class="h-2 w-2 rounded-full bg-amber-400"></span>
                Backlog ideas
              </Button>
            </Dropdown>
          </div>
        </article>

        <div class="border-t border-slate-200"></div>

        <article id="component-modal" class="space-y-6" x-data="{ open: false }" x-on:modal-close.window="open = false">
          <div class="space-y-2">
            <p class="text-xs font-semibold uppercase tracking-[0.35em] text-indigo-500">Component</p>
            <h2 class="text-3xl font-bold tracking-tight">Modal</h2>
            <p class="text-sm text-slate-600">
              Layered dialog container with slots for title and footer actions. Wrap with Alpine state to toggle visibility.
            </p>
          </div>
          <div class="space-y-3">
            <Button variant="secondary" x-on:click="open = true">Launch modal</Button>
            <p class="text-xs text-slate-500">
              Tip: listen for the <code class="rounded bg-slate-100 px-1.5 py-0.5 text-[10px] font-semibold text-slate-700">modal-close</code>
              event to update Alpine state.
            </p>
          </div>
          <template x-if="open">
            <Modal
              size="md"
              x-on:keydown.escape.window="open = false"
              x-on:modal-close="open = false"
            >
              <template slot="title">
                <h3 class="text-lg font-semibold text-slate-900">Save component preset</h3>
              </template>
              <div class="space-y-4 text-sm text-slate-600">
                <p>
                  Use modals for focused flows that need confirmation or additional context. Keep copy short and pair with
                  primary and secondary actions.
                </p>
                <Textbox label="Preset name" placeholder="e.g. Marketing CTA" />
              </div>
              <div slot="footer" class="flex w-full items-center justify-end gap-3">
                <Button variant="outline" x-on:click="open = false">Cancel</Button>
                <Button x-on:click="open = false">Save preset</Button>
              </div>
            </Modal>
          </template>
        </article>

        <div class="border-t border-slate-200"></div>

        <article id="component-forms" class="space-y-6">
          <div class="space-y-2">
            <p class="text-xs font-semibold uppercase tracking-[0.35em] text-indigo-500">Component</p>
            <h2 class="text-3xl font-bold tracking-tight">Textbox &amp; Password</h2>
            <p class="text-sm text-slate-600">
              Paired inputs with consistent spacing, labeling, and focus states for authentication or data capture flows.
            </p>
          </div>
          <form class="grid gap-6 rounded-2xl border border-slate-200 bg-white p-6 shadow-sm">
            <Textbox label="Full name" placeholder="Jane Doe" />
            <Textbox label="Work email" type="email" placeholder="jane@ansiversa.com" />
            <Password label="Create password" placeholder="At least 6 characters" toggleLabel="password" />
            <div class="flex items-center justify-end gap-3">
              <Button variant="outline">Cancel</Button>
              <Button type="submit">Create account</Button>
            </div>
          </form>
        </article>

        <div class="border-t border-slate-200"></div>

        <article id="component-feature-card" class="space-y-6">
          <div class="space-y-2">
            <p class="text-xs font-semibold uppercase tracking-[0.35em] text-indigo-500">Component</p>
            <h2 class="text-3xl font-bold tracking-tight">Feature Card</h2>
            <p class="text-sm text-slate-600">
              Flexible marketing card that pairs an icon with eyebrow, title, description, and slot content.
            </p>
          </div>
          <div class="grid gap-6 lg:grid-cols-3">
            {featureHighlights.map((feature) => (
              <FeatureCard
                eyebrow={feature.eyebrow}
                title={feature.title}
                description={feature.description}
                icon={feature.icon}
              />
            ))}
          </div>
        </article>

        <div class="border-t border-slate-200"></div>

        <article id="component-pricing-tier-card" class="space-y-6">
          <div class="space-y-2">
            <p class="text-xs font-semibold uppercase tracking-[0.35em] text-indigo-500">Component</p>
            <h2 class="text-3xl font-bold tracking-tight">Pricing Tier Card</h2>
            <p class="text-sm text-slate-600">
              Tiered pricing layout with feature lists, call-to-action button, and optional "featured" styling.
            </p>
          </div>
          <div class="grid gap-6 lg:grid-cols-3">
            {pricingTiers.map((tier) => (
              <PricingTierCard
                name={tier.name}
                price={tier.price}
                priceSuffix={tier.priceSuffix}
                description={tier.description}
                features={tier.features}
                ctaLabel={tier.ctaLabel}
                ctaHref={tier.ctaHref}
                featured={tier.featured}
              />
            ))}
          </div>
        </article>

        <div class="border-t border-slate-200"></div>

        <article
          id="component-data-grid"
          class="space-y-6"
          x-data={gridDemoState}
        >
          <div class="space-y-2">
            <p class="text-xs font-semibold uppercase tracking-[0.35em] text-indigo-500">Component</p>
            <h2 class="text-3xl font-bold tracking-tight">Data Grid</h2>
            <p class="text-sm text-slate-600">
              Headless data table with column filters, sorting, pagination, and custom row rendering.
            </p>
          </div>
          <DataGrid
            columns={dataGridColumns}
            rowsVar="grid.rows"
            loadingVar="grid.loading"
            errorVar="grid.error"
            filtersVar="grid.filters"
            hasFiltersVar="grid.hasActiveFilters"
            sortStateVar="grid.sort"
            onSort="grid.setSort"
            onFilterChange="grid.onFilterChange"
            onPageSizeChange="grid.setPageSize"
            onPrevPage="grid.prevPage"
            onNextPage="grid.nextPage"
            onSetPage="grid.setPage"
            onFirstPage="grid.firstPage"
            onLastPage="grid.lastPage"
            pageSizeVar="grid.pageSize"
            pageSizeOptions={[5, 10, 15]}
            pageVar="grid.page"
            pageNumbersVar="grid.pageNumbers"
            totalVar="grid.totalItems"
            totalPagesVar="grid.totalPages"
            emptyMessage="No documents available yet."
            filteredEmptyMessage="No documents match the current filters."
          >
            <Fragment slot="headerActions">
              <Button variant="ghost" size="sm">
                <i class="fas fa-plus text-sm"></i>
                New doc
              </Button>
            </Fragment>
            <Fragment slot="body">
              <template x-for="row in grid.rows" :key="row.id">
                <tr class="transition hover:bg-slate-50">
                  <td class="px-3 py-3 text-center">
                    <Button type="button" variant="ghost" size="sm">
                      <i class="fas fa-ellipsis-h text-sm text-slate-500"></i>
                    </Button>
                  </td>
                  <td class="px-3 py-3">
                    <p class="text-sm font-semibold text-slate-900" x-text="row.name"></p>
                    <p class="text-xs text-slate-500" x-text="row.summary"></p>
                  </td>
                  <td class="px-3 py-3">
                    <span
                      class="inline-flex items-center gap-2 rounded-full px-3 py-1 text-xs font-semibold capitalize"
                      :class="row.status === 'published' ? 'bg-emerald-50 text-emerald-700' : 'bg-amber-50 text-amber-700'"
                    >
                      <span
                        class="h-2 w-2 rounded-full"
                        :class="row.status === 'published' ? 'bg-emerald-500' : 'bg-amber-500'"
                      ></span>
                      <span x-text="row.status"></span>
                    </span>
                  </td>
                  <td class="px-3 py-3">
                    <span class="text-sm text-slate-600" x-text="row.updatedAt"></span>
                  </td>
                </tr>
              </template>
            </Fragment>
          </DataGrid>
        </article>

        <div class="border-t border-slate-200"></div>

        <article
          id="component-pagination-controls"
          class="space-y-6"
          x-data={paginationDemoState}
        >
          <div class="space-y-2">
            <p class="text-xs font-semibold uppercase tracking-[0.35em] text-indigo-500">Component</p>
            <h2 class="text-3xl font-bold tracking-tight">Pagination Controls</h2>
            <p class="text-sm text-slate-600">
              Standalone pagination footer for list views. Handles ranges, quick navigation, and ellipsis rendering.
            </p>
          </div>
          <div class="overflow-hidden rounded-2xl border border-slate-200 bg-white shadow-sm">
            <PaginationControls
              loadingVar="pager.loading"
              pageVar="pager.page"
              totalPagesVar="pager.totalPages"
              pageNumbersVar="pager.pageNumbers"
              onPrevPage="pager.prevPage"
              onNextPage="pager.nextPage"
              onSetPage="pager.setPage"
              onFirstPage="pager.firstPage"
              onLastPage="pager.lastPage"
              totalVar="pager.totalItems"
              pageSizeVar="pager.pageSize"
              showRangeSummary
            />
          </div>
        </article>

        <div class="border-t border-slate-200"></div>

        <article id="component-loader" class="space-y-6" x-data="{ trigger() { $store.loader.show(); setTimeout(() => $store.loader.hide(), 1200); } }">
          <div class="space-y-2">
            <p class="text-xs font-semibold uppercase tracking-[0.35em] text-indigo-500">Component</p>
            <h2 class="text-3xl font-bold tracking-tight">Loader</h2>
            <p class="text-sm text-slate-600">
              Global loading indicator that appears at the top of the viewport. Trigger through the shared Alpine store for
              async workflows.
            </p>
          </div>
          <div class="flex flex-col gap-3 rounded-2xl border border-slate-200 bg-slate-50 p-6 text-sm text-slate-600">
            <p>Click the button to toggle the loader and preview the animated bar + toast feedback.</p>
            <div class="flex flex-wrap gap-3">
              <Button x-on:click="trigger()">Show loader</Button>
            </div>
            <p class="text-xs text-slate-500">
              Implementation: <code class="rounded bg-slate-100 px-1.5 py-0.5 text-[10px] font-semibold text-slate-700">$store.loader.show()</code>
              and <code class="rounded bg-slate-100 px-1.5 py-0.5 text-[10px] font-semibold text-slate-700">$store.loader.hide()</code>.
            </p>
          </div>
        </article>

        <div class="border-t border-slate-200"></div>

        <article id="component-caption-variant-card" class="space-y-6">
          <div class="space-y-2">
            <p class="text-xs font-semibold uppercase tracking-[0.35em] text-indigo-500">Component</p>
            <h2 class="text-3xl font-bold tracking-tight">Caption Variant Card</h2>
            <p class="text-sm text-slate-600">
              Social caption preview with badges, counters, and compliance indicators. Perfect for copy review flows.
            </p>
          </div>
          <VariantCard platform={captionDemoPlatform} variant={captionDemoVariant} badgeLabel="Chosen" isChosen>
            <Fragment slot="actions">
              <Button variant="ghost" size="sm">
                <i class="fas fa-copy text-xs"></i>
                Copy
              </Button>
              <Button variant="secondary" size="sm">
                Use caption
              </Button>
            </Fragment>
          </VariantCard>
        </article>
      </div>
    </section>
  </main>
</Layout>
