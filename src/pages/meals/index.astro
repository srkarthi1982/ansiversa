---
import Layout from '../../layouts/Layout.astro';
import Button from '../../components/Button.astro';
import SectionHeading from '../../components/SectionHeading.astro';
import MetricCard from '../../components/meals/MetricCard.astro';
import './stores';

const heroHighlights = [
  {
    icon: 'fas fa-fire-burner',
    title: 'Macro-smart rotations',
    description:
      'Weekly rhythms mix complex carbs, lean proteins, and plant-forward swaps that stay inside your targets.',
  },
  {
    icon: 'fas fa-basket-shopping',
    title: 'Zero-waste grocery brain',
    description: 'Consolidated grocery aisles auto-flag pantry matches and estimate spend versus budget.',
  },
  {
    icon: 'fas fa-seedling',
    title: 'Dietary peace of mind',
    description: 'Allergies, dislikes, and calorie bands stay locked—swaps show only compatible recipes.',
  },
];

const controlFeatures = [
  {
    icon: 'fas fa-bolt',
    title: 'Generate & personalise',
    description:
      'Kickstart a seven-day outline in seconds, then tune calorie ceilings, cuisines, and batch prep intensity.',
  },
  {
    icon: 'fas fa-rotate',
    title: 'Smart swaps',
    description: 'One-click swaps suggest nutritionally compatible replacements with updated macro totals.',
  },
  {
    icon: 'fas fa-list-check',
    title: 'Prep orchestration',
    description: 'Color-coded prep sessions bundle tasks, durations, and dependencies for stress-free Sundays.',
  },
];

const automationHighlights = [
  {
    icon: 'fas fa-chart-pie',
    title: 'Macro insights',
    description: 'Track average daily calories and weekly macro totals versus your diet profile.',
  },
  {
    icon: 'fas fa-wallet',
    title: 'Budget guardrails',
    description: 'Watch grocery spend, pantry coverage, and remaining headroom update in real time.',
  },
  {
    icon: 'fas fa-share-nodes',
    title: 'Export everywhere',
    description: 'PDF playbooks, CSV grocery lists, Markdown for Notion, and read-only share links.',
  },
];

const allergyLibrary = ['nuts', 'dairy', 'gluten', 'soy', 'shellfish', 'eggs'];

---
<Layout>
  <a
    class="sr-only focus:not-sr-only focus:absolute focus:left-4 focus:top-4 focus:rounded-md focus:bg-white focus:px-4 focus:py-2 focus:text-sm focus:font-semibold focus:text-slate-900 focus:outline-none focus:ring-2 focus:ring-emerald-500"
    href="#weekly-planner"
  >
    Skip to meal planner
  </a>
  <main
    class="min-h-screen bg-slate-950 text-white"
    x-data="() => ({ planner: $store.mealPlanner })"
    x-init="planner.init()"
  >
    <section class="relative overflow-hidden pb-24 pt-20">
      <div class="absolute inset-0 -z-10 bg-[radial-gradient(circle_at_top,_rgba(16,185,129,0.14),_rgba(15,23,42,0.95))]"></div>
      <div class="absolute inset-x-0 top-0 -z-10 h-1/2 bg-gradient-to-br from-emerald-500/40 via-cyan-500/30 to-indigo-600/40 blur-3xl"></div>
      <div class="relative mx-auto flex max-w-6xl flex-col gap-16 px-4 sm:px-6 lg:flex-row lg:items-end lg:px-8">
        <div class="flex-1">
          <span class="inline-flex items-center gap-2 rounded-full bg-emerald-400/10 px-4 py-1.5 text-xs font-semibold uppercase tracking-[0.35em] text-emerald-200">
            <i class="fas fa-utensils text-[11px]"></i>
            Ansiversa Meal OS
          </span>
          <h1 class="mt-6 text-4xl font-black leading-tight sm:text-5xl lg:text-6xl">
            Plan nourishing weeks with AI that understands your pantry, budget, and goals
          </h1>
          <p class="mt-5 max-w-2xl text-lg text-white/80">
            Meal Planner pairs nutritional intelligence with zero-waste grocery orchestration. Generate balanced menus, keep pantry items in play, and deliver grocery-ready exports for the whole household.
          </p>
          <div class="mt-8 flex flex-wrap gap-3">
            <Button href="#weekly-planner" class="bg-white text-slate-950 hover:bg-slate-100">
              <i class="fas fa-calendar-week text-xs"></i>
              Review this week's plan
            </Button>
            <Button
              type="button"
              variant="outline"
              class="border-white/40 text-white hover:border-white/70 hover:text-white"
              @click.prevent="planner.setActivePlan(planner.state.plans[1]?.id ?? planner.state.plans[0]?.id ?? '')"
            >
              <i class="fas fa-shuffle text-xs"></i>
              Preview alternative diet
            </Button>
          </div>
                    <dl class="mt-12 grid gap-6 sm:grid-cols-3">
            {heroHighlights.map((highlight) => (
              <div class="rounded-3xl border border-white/10 bg-white/5 p-5 backdrop-blur">
                <dt class="flex items-center gap-3 text-sm font-semibold text-white">
                  <span class="flex size-9 items-center justify-center rounded-full bg-white/10">
                    <i class={highlight.icon}></i>
                  </span>
                  <span>{highlight.title}</span>
                </dt>
                <dd class="mt-3 text-sm text-white/70">{highlight.description}</dd>
              </div>
            ))}
          </dl>
        </div>
        <aside class="w-full max-w-sm space-y-5 rounded-3xl border border-white/10 bg-white/5 p-6 shadow-2xl shadow-emerald-900/40 backdrop-blur">
          <h2 class="text-sm font-semibold uppercase tracking-[0.3em] text-white/60">Live nutrition pulse</h2>
          <div class="space-y-4">
            <MetricCard
              icon="fas fa-fire"
              label="Average daily calories"
              :value="`${planner.state.metrics.averageCalories} kcal`"
              sublabel="Target adjusts with diet profile"
            />
            <MetricCard
              icon="fas fa-dumbbell"
              label="Weekly protein"
              :value="`${Math.round(planner.state.metrics.macroTotals.protein)} g`"
              sublabel="Summed across 7 days"
              accent="from-sky-500 via-indigo-500 to-purple-500"
            />
            <MetricCard
              icon="fas fa-piggy-bank"
              label="Budget headroom"
              :value="`$${planner.state.metrics.budgetHeadroom}`"
              sublabel="After estimated grocery spend"
              accent="from-amber-500 via-orange-500 to-rose-500"
            />
          </div>
        </aside>
      </div>
    </section>

    <section id="weekly-planner" class="relative border-t border-white/10 bg-slate-900/80 py-20">
      <div class="absolute inset-x-0 top-0 -z-10 h-full bg-gradient-to-b from-emerald-500/10 via-transparent to-transparent"></div>
      <div class="mx-auto max-w-6xl space-y-12 px-4 sm:px-6 lg:px-8">
        <SectionHeading
          eyebrow="Planner cockpit"
          title="Command your weekly nutrition"
          description="Switch between diet profiles, inspect macro breakdowns, and orchestrate prep without losing sight of allergies or spend."
        />
        <div class="grid gap-8 lg:grid-cols-[1.2fr_0.8fr]">
          <div class="space-y-8 rounded-3xl border border-white/10 bg-white/5 p-6 shadow-xl">
            <header class="flex flex-wrap items-center justify-between gap-4">
              <div>
                <p class="text-xs font-semibold uppercase tracking-[0.3em] text-white/60">Active plan</p>
                <h2 class="mt-2 text-2xl font-semibold" x-text="planner.activePlan?.title ?? '—'"></h2>
                <p class="mt-1 text-sm text-white/70" x-text="planner.activePlan?.summary ?? ''"></p>
              </div>
              <div class="flex items-center gap-3">
                <span class="rounded-full bg-white/10 px-4 py-1 text-xs font-semibold text-white/80" x-text="planner.activePlan?.dietProfileId?.toUpperCase() ?? ''"></span>
                <span class="text-xs text-white/60" x-text="`${planner.activePlan?.startDate ?? ''} → ${planner.activePlan?.endDate ?? ''}`"></span>
              </div>
            </header>
            <div class="flex flex-wrap gap-2">
              <template x-for="(plan, index) in planner.state.plans" :key="plan.id">
                <button
                  type="button"
                  class="rounded-full border px-3 py-1.5 text-xs font-semibold uppercase tracking-wide transition"
                  :class="planner.state.activePlanId === plan.id ? 'border-emerald-400 bg-emerald-400/20 text-emerald-100' : 'border-white/20 text-white/60 hover:border-white/40 hover:text-white'"
                  @click="planner.setActivePlan(plan.id)"
                  x-text="plan.title"
                ></button>
              </template>
            </div>
            <div>
              <h3 class="text-sm font-semibold uppercase tracking-[0.3em] text-white/50">Focus by day</h3>
              <div class="mt-3 flex flex-wrap gap-2">
                <template x-for="(day, index) in planner.activePlan?.days ?? []" :key="day.id">
                  <button
                    type="button"
                    class="rounded-2xl border px-3 py-2 text-sm transition"
                    :class="planner.state.selectedDayIndex === index ? 'border-emerald-400 bg-emerald-500/20 text-white' : 'border-white/15 text-white/70 hover:border-white/30 hover:text-white'"
                    @click="planner.setSelectedDay(index)"
                  >
                    <span class="block text-xs font-semibold uppercase tracking-[0.3em]" x-text="day.label"></span>
                    <span class="block text-[11px] text-white/60" x-text="day.focus"></span>
                  </button>
                </template>
              </div>
            </div>
            <div class="rounded-3xl border border-white/10 bg-slate-950/60 p-5">
              <h3 class="text-sm font-semibold uppercase tracking-[0.3em] text-white/50">Meals for <span x-text="planner.activeDay?.label ?? ''"></span></h3>
              <div class="mt-4 space-y-4">
                <template x-for="meal in planner.activeDay?.meals ?? []" :key="meal.mealType">
                  <article class="rounded-2xl border border-white/10 bg-white/5 p-4">
                    <div class="flex flex-wrap items-start justify-between gap-4">
                      <div>
                        <p class="text-xs font-semibold uppercase tracking-[0.3em] text-white/60" x-text="meal.mealType"></p>
                        <h4 class="mt-1 text-lg font-semibold" x-text="planner.resolveRecipe(meal.recipeId)?.title ?? 'Recipe unavailable'"></h4>
                        <p class="mt-1 text-sm text-white/60" x-text="planner.resolveRecipe(meal.recipeId)?.description ?? 'Select a swap to resolve allergy conflicts.'"></p>
                      </div>
                      <div class="text-right text-xs text-white/70">
                        <p>
                          <i class="fas fa-fire text-[11px] text-emerald-300"></i>
                          <span class="ml-1" x-text="`${planner.resolveRecipe(meal.recipeId)?.macros.calories ?? 0} kcal`"></span>
                        </p>
                        <p class="mt-1">
                          <i class="fas fa-stopwatch text-[11px] text-sky-300"></i>
                          <span class="ml-1" x-text="`${planner.resolveRecipe(meal.recipeId)?.prepTimeMinutes ?? 0} min prep`"></span>
                        </p>
                      </div>
                    </div>
                    <div class="mt-4 flex flex-wrap items-center justify-between gap-3">
                      <div class="flex flex-wrap gap-2 text-[11px] text-white/60">
                        <template x-for="tag in planner.resolveRecipe(meal.recipeId)?.dietTags ?? []" :key="tag">
                          <span class="inline-flex items-center gap-1 rounded-full border border-white/15 px-3 py-1">
                            <i class="fas fa-circle text-[6px] text-emerald-300"></i>
                            <span x-text="tag"></span>
                          </span>
                        </template>
                      </div>
                      <div class="flex items-center gap-2">
                        <template x-for="swap in planner.getSwapOptions(meal.mealType)" :key="swap.id">
                          <button
                            type="button"
                            class="inline-flex items-center gap-2 rounded-full bg-white/10 px-3 py-1.5 text-xs font-semibold text-white transition hover:bg-white/20"
                            @click="planner.swapMeal(planner.activeDay?.id ?? '', meal.mealType, swap.id)"
                          >
                            <i class="fas fa-arrows-rotate text-[11px]"></i>
                            <span x-text="swap.label"></span>
                          </button>
                        </template>
                      </div>
                    </div>
                  </article>
                </template>
              </div>
            </div>
          </div>
          <aside class="space-y-8">
            <div class="rounded-3xl border border-white/10 bg-white/5 p-6">
              <h3 class="text-sm font-semibold uppercase tracking-[0.3em] text-white/50">Diet profiles</h3>
              <div class="mt-4 space-y-4">
                <template x-for="profile in planner.state.dietProfiles" :key="profile.id">
                  <button
                    type="button"
                    class="block w-full rounded-2xl border px-4 py-4 text-left transition"
                    :class="planner.state.filters.dietProfileId === profile.id ? 'border-emerald-400 bg-emerald-500/20 text-white' : 'border-white/15 text-white/70 hover:border-white/30 hover:text-white'"
                    @click="planner.setDietProfile(profile.id)"
                  >
                    <div class="flex items-center justify-between">
                      <p class="text-base font-semibold" x-text="profile.name"></p>
                      <span class="text-xs uppercase tracking-[0.25em]" x-text="profile.calorieRange"></span>
                    </div>
                    <p class="mt-2 text-sm text-white/60" x-text="profile.description"></p>
                    <p class="mt-3 text-xs font-semibold uppercase tracking-[0.3em] text-white/50">Macro split</p>
                    <div class="mt-1 flex flex-wrap gap-2 text-xs text-white/70">
                      <span>Protein {profile.macroPercentage.protein}%</span>
                      <span>Carbs {profile.macroPercentage.carbs}%</span>
                      <span>Fat {profile.macroPercentage.fat}%</span>
                    </div>
                  </button>
                </template>
              </div>
            </div>
            <div class="rounded-3xl border border-white/10 bg-white/5 p-6">
              <h3 class="text-sm font-semibold uppercase tracking-[0.3em] text-white/50">Allergy guard</h3>
              <p class="mt-2 text-sm text-white/60">Toggle sensitivities and we will hide conflicting recipes.</p>
              <div class="mt-4 flex flex-wrap gap-2">
                {allergyLibrary.map((allergy) => (
                  <button
                    type="button"
                    class="rounded-full border px-3 py-1.5 text-xs font-semibold uppercase tracking-wide transition"
                    x-data="{ allergy: '{allergy}' }"
                    :class="planner.state.filters.allergies.includes(allergy) ? 'border-rose-400 bg-rose-500/20 text-rose-100' : 'border-white/20 text-white/60 hover:border-white/40 hover:text-white'"
                    @click="planner.toggleAllergy(allergy)"
                  >
                    {allergy.charAt(0).toUpperCase() + allergy.slice(1)}
                  </button>
                ))}
              </div>
            </div>
            <div class="rounded-3xl border border-white/10 bg-white/5 p-6">
              <h3 class="text-sm font-semibold uppercase tracking-[0.3em] text-white/50">Prep sessions</h3>
              <div class="mt-3 space-y-4">
                <template x-for="session in planner.state.prepSessions" :key="session.id">
                  <div class="rounded-2xl border border-white/10 bg-slate-950/50 p-4">
                    <div class="flex items-start justify-between">
                      <div>
                        <p class="text-xs font-semibold uppercase tracking-[0.3em] text-white/60" x-text="session.day"></p>
                        <h4 class="mt-1 text-base font-semibold" x-text="session.label"></h4>
                      </div>
                      <span class="rounded-full bg-white/10 px-3 py-1 text-[11px] text-white/70">
                        <i class="fas fa-clock text-[10px] text-emerald-300"></i>
                        <span class="ml-1" x-text="`${session.tasks.reduce((total, task) => total + task.durationMinutes, 0)} min`"></span>
                      </span>
                    </div>
                    <p class="mt-2 text-sm text-white/60" x-text="session.focus"></p>
                    <ul class="mt-3 space-y-2 text-xs text-white/70">
                      <template x-for="task in session.tasks" :key="task.id">
                        <li class="flex items-center gap-2">
                          <span class="flex size-6 items-center justify-center rounded-full bg-emerald-500/10 text-emerald-200">
                            <i class="fas fa-check text-[10px]"></i>
                          </span>
                          <span>
                            <span class="font-semibold" x-text="task.label"></span>
                            <span class="ml-1 text-white/50" x-text="`${task.durationMinutes} min`"></span>
                          </span>
                        </li>
                      </template>
                    </ul>
                  </div>
                </template>
              </div>
            </div>
          </aside>
        </div>
      </div>
    </section>

    <section class="bg-slate-950 py-20">
      <div class="mx-auto max-w-6xl space-y-12 px-4 sm:px-6 lg:px-8">
        <SectionHeading
          eyebrow="Automation & grocery intelligence"
          title="From pantry tracking to export-ready lists"
          description="Consolidate ingredients, apply pantry inventory, and share the plan without copy-paste chaos."
        />
        <div class="grid gap-6 lg:grid-cols-[1.1fr_0.9fr]">
          <div class="space-y-6 rounded-3xl border border-white/10 bg-white/5 p-6">
            <h3 class="text-sm font-semibold uppercase tracking-[0.3em] text-white/50">Grocery list snapshot</h3>
            <p class="mt-2 text-sm text-white/70" x-text="planner.activeGroceryList?.notes ?? 'Load a plan to view grocery breakdowns.'"></p>
            <div class="mt-5 space-y-4">
              <template x-for="aisle in planner.activeGroceryList?.aisles ?? []" :key="aisle.id">
                <div class="rounded-2xl border border-white/10 bg-slate-950/60 p-4">
                  <div class="flex items-center justify-between">
                    <div class="flex items-center gap-3 text-sm font-semibold text-white">
                      <span class="flex size-9 items-center justify-center rounded-full bg-white/10">
                        <i :class="aisle.icon"></i>
                      </span>
                      <span x-text="aisle.name"></span>
                    </div>
                    <span class="text-xs text-white/60" x-text="`${aisle.items.length} items`"></span>
                  </div>
                  <ul class="mt-3 space-y-2 text-sm text-white/70">
                    <template x-for="item in aisle.items" :key="item.id">
                      <li class="flex flex-wrap items-center justify-between gap-2 rounded-xl border border-white/10 bg-white/5 px-3 py-2">
                        <div>
                          <p class="font-semibold" x-text="item.name"></p>
                          <p class="text-xs text-white/50" x-text="`${item.quantity} ${item.unit}`"></p>
                        </div>
                        <div class="text-right text-xs text-white/60">
                          <p>
                            <i class="fas fa-tags text-[11px] text-emerald-300"></i>
                            <span class="ml-1" x-text="`$${item.priceEstimate.toFixed(2)}`"></span>
                          </p>
                          <template x-if="item.pantryItemId">
                            <p class="mt-1 inline-flex items-center gap-1 rounded-full px-2 py-0.5 text-[10px]" :class="item.fulfilled ? 'bg-emerald-500/20 text-emerald-200' : 'bg-white/10 text-white/60'">
                              <i class="fas fa-jar"></i>
                              <span x-text="item.fulfilled ? 'Covered by pantry' : 'Check pantry' "></span>
                            </p>
                          </template>
                        </div>
                      </li>
                    </template>
                  </ul>
                </div>
              </template>
            </div>
            <div class="mt-6 flex flex-wrap gap-3">
              <Button
                type="button"
                class="bg-emerald-500 text-slate-950 hover:bg-emerald-400"
                @click="planner.applyPantryToGrocery()"
              >
                <i class="fas fa-magic-wand-sparkles text-xs"></i>
                Apply pantry matches
              </Button>
              <Button
                type="button"
                variant="outline"
                class="border-white/40 text-white hover:border-white/70 hover:text-white"
                @click="planner.resetPantryMatches()"
              >
                <i class="fas fa-rotate-left text-xs"></i>
                Reset matches
              </Button>
            </div>
          </div>
          <aside class="space-y-6">
            <div class="rounded-3xl border border-white/10 bg-white/5 p-6">
              <h3 class="text-sm font-semibold uppercase tracking-[0.3em] text-white/50">Pantry inventory</h3>
              <ul class="mt-3 space-y-3 text-sm text-white/80">
                <template x-for="item in planner.state.pantry" :key="item.id">
                  <li class="flex items-center justify-between gap-4 rounded-2xl border bg-slate-950/60 px-4 py-3" :class="`border-${item.status === 'fresh' ? 'emerald' : item.status === 'low' ? 'amber' : 'rose'}-500/30`">
                    <div>
                      <p class="font-semibold" x-text="item.name"></p>
                      <p class="text-xs text-white/50" x-text="`${item.quantity} ${item.unit} • exp ${item.expiresOn}`"></p>
                    </div>
                    <span
                      class="rounded-full border px-3 py-1 text-[11px] uppercase tracking-[0.3em]"
                      :class="item.status === 'fresh' ? 'border-emerald-400/40 bg-emerald-500/10 text-emerald-200' : item.status === 'low' ? 'border-amber-400/40 bg-amber-500/10 text-amber-200' : 'border-rose-400/40 bg-rose-500/10 text-rose-200'"
                      x-text="item.status"
                    ></span>
                  </li>
                </template>
              </ul>
            </div>
            <div class="rounded-3xl border border-white/10 bg-white/5 p-6">
              <h3 class="text-sm font-semibold uppercase tracking-[0.3em] text-white/50">Exports & automations</h3>
              <p class="mt-2 text-sm text-white/70">Send plans to your tools in seconds.</p>
              <ul class="mt-3 space-y-2 text-sm text-white/80">
                <template x-for="option in planner.state.exportOptions" :key="option.id">
                  <li class="flex items-center justify-between gap-3 rounded-2xl border border-white/10 bg-slate-950/60 px-4 py-3">
                    <div>
                      <p class="font-semibold" x-text="option.label"></p>
                      <p class="text-xs text-white/60" x-text="option.description"></p>
                    </div>
                    <span class="text-lg text-emerald-300">
                      <i :class="option.format === 'pdf' ? 'fas fa-file-pdf' : option.format === 'csv' ? 'fas fa-table' : option.format === 'markdown' ? 'fas fa-file-lines' : 'fas fa-link' "></i>
                    </span>
                  </li>
                </template>
              </ul>
              <div class="mt-4 flex flex-wrap gap-3">
                <Button href="/meals/api/plan/export" variant="outline" class="border-emerald-400 text-emerald-200 hover:bg-emerald-500/20">
                  <i class="fas fa-file-arrow-down text-xs"></i>
                  Export active plan
                </Button>
                <Button href="/meals/api/grocery/list" class="bg-white text-slate-950 hover:bg-slate-100">
                  <i class="fas fa-cart-shopping text-xs"></i>
                  Download grocery CSV
                </Button>
              </div>
            </div>
            <div class="rounded-3xl border border-white/10 bg-white/5 p-6">
              <h3 class="text-sm font-semibold uppercase tracking-[0.3em] text-white/50">Automation highlights</h3>
              <ul class="mt-3 space-y-3 text-sm text-white/75">
                {automationHighlights.map((item) => (
                  <li class="flex gap-3 rounded-2xl border border-white/10 bg-slate-950/60 px-4 py-3">
                    <span class="mt-1 flex size-9 items-center justify-center rounded-full bg-white/10 text-emerald-300">
                      <i class={item.icon}></i>
                    </span>
                    <div>
                      <p class="font-semibold text-white">{item.title}</p>
                      <p class="text-xs text-white/60">{item.description}</p>
                    </div>
                  </li>
                ))}
              </ul>
            </div>
          </aside>
        </div>
      </div>
    </section>

    <section class="border-t border-white/10 bg-slate-900/90 py-20">
      <div class="mx-auto max-w-6xl space-y-10 px-4 sm:px-6 lg:px-8">
        <SectionHeading
          eyebrow="Why teams love Meal Planner"
          title="From nutritionists to busy families"
          description="Designed for multi-profile households, coaching clients, and wellness teams who need a fast but thoughtful meal OS."
        />
        <div class="grid gap-6 lg:grid-cols-3">
          {controlFeatures.map((feature) => (
            <div class="rounded-3xl border border-white/10 bg-white/5 p-6">
              <span class="flex size-12 items-center justify-center rounded-2xl bg-white/10 text-emerald-300">
                <i class={feature.icon}></i>
              </span>
              <h3 class="mt-4 text-lg font-semibold text-white">{feature.title}</h3>
              <p class="mt-2 text-sm text-white/70">{feature.description}</p>
            </div>
          ))}
        </div>
      </div>
    </section>
  </main>
</Layout>
