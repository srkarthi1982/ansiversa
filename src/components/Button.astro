---
type Props = {
  href?: string;
  type?: 'button' | 'submit' | 'reset';
  variant?: 'primary' | 'secondary' | 'outline' | 'ghost' | 'light' | 'tinted';
  size?: 'sm' | 'md' | 'lg';
  block?: boolean;
};

const {
  href,
  type = 'button',
  variant = 'primary',
  size = 'md',
  block = false,
  ...rest
} = Astro.props as Props & Record<string, unknown>;

const restProps = rest as Record<string, unknown>;
const hasDynamicHref =
  typeof restProps[':href'] !== 'undefined' || typeof restProps['x-bind:href'] !== 'undefined';
const isLink = Boolean(href ?? hasDynamicHref);

const variantClasses: Record<string, string> = {
  primary: 'bg-indigo-600 text-white hover:bg-indigo-500',
  secondary: 'bg-slate-900 text-white hover:bg-slate-800',
  outline: 'border border-slate-300 bg-white text-slate-700 hover:bg-slate-50',
  ghost: 'text-slate-700 hover:bg-slate-100',
  light: 'bg-white text-slate-900 hover:bg-slate-100',
  tinted: 'bg-black/10 text-white hover:bg-black/20',
};

const sizeClasses: Record<string, string> = {
  sm: 'px-3 py-1.5 text-xs',
  md: 'px-4 py-2 text-sm',
  lg: 'px-5 py-3 text-base',
};

const baseClasses =
  'inline-flex items-center justify-center rounded-lg font-semibold transition focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-indigo-500 focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-60';

const resolvedClasses = [
  baseClasses,
  sizeClasses[size] ?? sizeClasses.md,
  variantClasses[variant] ?? variantClasses.primary,
  block ? 'w-full' : '',
]
  .filter(Boolean)
  .join(' ');
---
{isLink ? (
  <a href={href ?? (hasDynamicHref ? undefined : '#')} class={resolvedClasses} {...rest}>
    <slot />
  </a>
) : (
  <button type={type} class={resolvedClasses} {...rest}>
    <slot />
  </button>
)}
