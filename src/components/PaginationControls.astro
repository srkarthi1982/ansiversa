---
type PaginationProps = {
  loadingVar: string;
  pageVar: string;
  totalPagesVar: string;
  pageNumbersVar: string;
  onPrevPage: string;
  onNextPage: string;
  onSetPage: string;
  onFirstPage?: string;
  onLastPage?: string;
  prevLabel?: string;
  nextLabel?: string;
  totalVar?: string;
  pageSizeVar?: string;
  onPageSizeChange?: string;
  pageSizeOptions?: number[];
  showRangeSummary?: boolean;
};

const {
  loadingVar,
  pageVar,
  totalPagesVar,
  pageNumbersVar,
  onPrevPage,
  onNextPage,
  onSetPage,
  onFirstPage,
  onLastPage,
  prevLabel = "Prev",
  nextLabel = "Next",
  totalVar,
  pageSizeVar,
  showRangeSummary = true,
}: PaginationProps = Astro.props;

const canShowRange = Boolean(totalVar && pageVar && pageSizeVar && showRangeSummary);
const startRangeExpression = canShowRange
  ? `Intl.NumberFormat().format(Math.min(((${pageVar} ?? 1) - 1) * (${pageSizeVar} ?? 0) + 1, (${totalVar} ?? 0)))`
  : "";
const endRangeExpression = canShowRange
  ? `Intl.NumberFormat().format(Math.min((${pageVar} ?? 1) * (${pageSizeVar} ?? 0), (${totalVar} ?? 0)))`
  : "";
const totalExpression = totalVar ? `Intl.NumberFormat().format(${totalVar} ?? 0)` : "";

const firstPageHandler = (() => {
  if (onFirstPage) return `${onFirstPage}()`;
  if (onSetPage) return `${onSetPage}(1)`;
  return "";
})();

const lastPageHandler = (() => {
  if (onLastPage) return `${onLastPage}()`;
  if (onSetPage && totalPagesVar) return `${onSetPage}(${totalPagesVar})`;
  if (onSetPage) return `${onSetPage}(1)`;
  return "";
})();
---
<div class="border-t border-slate-200 px-4 py-4 sm:px-6">
  <div class="flex flex-col gap-3 sm:flex-row sm:items-center">
    {canShowRange ? (
      <div class="flex flex-wrap items-center gap-1 text-xs font-medium text-slate-500">
        <span>Showing</span>
        <span x-text={startRangeExpression}></span>
        <span>to</span>
        <span x-text={endRangeExpression}></span>
        <span>of</span>
        <span x-text={totalExpression}></span>
        <span>records</span>
      </div>
    ) : showRangeSummary ? (
      <p class="text-xs font-medium text-slate-500">
        <span x-text={`'Page ' + (${pageVar} ?? 1) + ' of ' + (${totalPagesVar} ?? 1)`}></span>
      </p>
    ) : null}
    <div class="flex flex-1 flex-wrap items-center justify-center gap-2 sm:justify-center" x-cloak>
      <button
        type="button"
        class="inline-flex items-center gap-2 rounded-full border border-slate-200 bg-white px-3 py-2 text-xs font-semibold text-slate-600 transition hover:border-slate-300 hover:text-slate-800 disabled:cursor-not-allowed disabled:opacity-60"
        x-on:click={firstPageHandler}
        x-bind:disabled={`${loadingVar} || (${pageVar} ?? 1) <= 1`}
      >
        <i class="fas fa-angle-double-left text-xs"></i>
        <span class="sr-only">First</span>
      </button>
      <button
        type="button"
        class="inline-flex items-center gap-2 rounded-full border border-slate-200 bg-white px-3 py-2 text-xs font-semibold text-slate-600 transition hover:border-slate-300 hover:text-slate-800 disabled:cursor-not-allowed disabled:opacity-60"
        x-on:click={`${onPrevPage}()`}
        x-bind:disabled={`${loadingVar} || (${pageVar} ?? 1) <= 1`}
      >
        <i class="fas fa-angle-left text-xs"></i>
        <span class="sr-only">{prevLabel}</span>
      </button>
      <template x-for={`item in ${pageNumbersVar}`} :key="typeof item === 'number' ? 'page-' + item : item">
        <template x-if="typeof item === 'number'">
          <button
            type="button"
            class="inline-flex items-center justify-center rounded-full border px-3 py-1 text-xs font-semibold transition disabled:cursor-not-allowed disabled:opacity-60"
            x-text="item"
            x-on:click={`${onSetPage}(item)`}
            x-bind:disabled={`${loadingVar}`}
            :class={`item === ${pageVar} ? 'border-indigo-600 bg-indigo-600 text-white' : 'border-slate-200 bg-white text-slate-600 hover:border-slate-300 hover:text-slate-800'`}
          ></button>
        </template>
        <template x-else>
          <span class="px-2 text-xs font-semibold text-slate-400">...</span>
        </template>
      </template>
      <button
        type="button"
        class="inline-flex items-center gap-2 rounded-full border border-slate-200 bg-white px-3 py-2 text-xs font-semibold text-slate-600 transition hover:border-slate-300 hover:text-slate-800 disabled:cursor-not-allowed disabled:opacity-60"
        x-on:click={`${onNextPage}()`}
        x-bind:disabled={`${loadingVar} || (${totalPagesVar} ?? 1) === 0 || (${pageVar} ?? 1) >= (${totalPagesVar} ?? 1)`}
      >
        <i class="fas fa-angle-right text-xs"></i>
        <span class="sr-only">{nextLabel}</span>
      </button>
      <button
        type="button"
        class="inline-flex items-center gap-2 rounded-full border border-slate-200 bg-white px-3 py-2 text-xs font-semibold text-slate-600 transition hover:border-slate-300 hover:text-slate-800 disabled:cursor-not-allowed disabled:opacity-60"
        x-on:click={lastPageHandler}
        x-bind:disabled={`${loadingVar} || (${totalPagesVar} ?? 1) === 0 || (${pageVar} ?? 1) >= (${totalPagesVar} ?? 1)`}
      >
        <i class="fas fa-angle-double-right text-xs"></i>
        <span class="sr-only">Last</span>
      </button>
    </div>
  </div>
</div>
