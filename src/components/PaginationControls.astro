---
type PaginationProps = {
  loadingVar: string;
  pageVar: string;
  totalPagesVar: string;
  pageNumbersVar: string;
  onPrevPage: string;
  onNextPage: string;
  onSetPage: string;
  prevLabel?: string;
  nextLabel?: string;
  totalVar?: string;
  pageSizeVar?: string;
  onPageSizeChange?: string;
  pageSizeOptions?: number[];
};

const {
  loadingVar,
  pageVar,
  totalPagesVar,
  pageNumbersVar,
  onPrevPage,
  onNextPage,
  onSetPage,
  prevLabel = "Prev",
  nextLabel = "Next",
  totalVar,
  pageSizeVar,
  onPageSizeChange,
  pageSizeOptions = [10, 20, 30],
}: PaginationProps = Astro.props;

const canShowRange = Boolean(totalVar && pageVar && pageSizeVar);
const startRangeExpression = canShowRange
  ? `Intl.NumberFormat().format(Math.min(((${pageVar} ?? 1) - 1) * (${pageSizeVar} ?? 0) + 1, (${totalVar} ?? 0)))`
  : "";
const endRangeExpression = canShowRange
  ? `Intl.NumberFormat().format(Math.min((${pageVar} ?? 1) * (${pageSizeVar} ?? 0), (${totalVar} ?? 0)))`
  : "";
const totalExpression = totalVar ? `Intl.NumberFormat().format(${totalVar} ?? 0)` : "";
const shouldRenderPageSizeSelect = Boolean(pageSizeVar && onPageSizeChange);
---
<div class="border-t border-slate-200 px-4 py-4 sm:px-6">
  <div class="flex flex-col gap-3 sm:flex-row sm:items-center sm:justify-between">
    {canShowRange ? (
      <div class="flex flex-wrap items-center gap-1 text-xs font-medium text-slate-500">
        <span>Showing</span>
        <span x-text={startRangeExpression}></span>
        <span>to</span>
        {shouldRenderPageSizeSelect ? (
          <select
            class="rounded-lg border border-slate-200 bg-white px-2 py-1 text-xs font-semibold text-slate-700 focus:border-indigo-500 focus:outline-none focus:ring-2 focus:ring-indigo-200"
            x-bind:disabled={`${loadingVar}`}
            x-bind:value={`${pageSizeVar}`}
            x-on:change={`${onPageSizeChange}(Number($event.target.value))`}
          >
            {pageSizeOptions.map((size) => (
              <option value={size}>{size}</option>
            ))}
          </select>
        ) : (
          <span x-text={endRangeExpression}></span>
        )}
        <span>of</span>
        <span x-text={totalExpression}></span>
        <span>entries</span>
      </div>
    ) : (
      <p class="text-xs font-medium text-slate-500">
        <span x-text={`'Page ' + (${pageVar} ?? 1) + ' of ' + (${totalPagesVar} ?? 1)`}></span>
      </p>
    )}
    <div class="flex flex-wrap items-center gap-2" x-cloak>
      <button
        type="button"
        class="inline-flex items-center gap-2 rounded-full border border-slate-200 bg-white px-4 py-2 text-xs font-semibold text-slate-600 transition hover:border-slate-300 hover:text-slate-800 disabled:cursor-not-allowed disabled:opacity-60"
        x-on:click={`${onPrevPage}()`}
        x-bind:disabled={`${loadingVar} || (${pageVar} ?? 1) <= 1`}
      >
        {prevLabel}
      </button>
      <template x-for={`pageNumber in ${pageNumbersVar}`} :key="`page-${pageNumber}`">
        <button
          type="button"
          class="inline-flex items-center justify-center rounded-full border px-3 py-1 text-xs font-semibold transition disabled:cursor-not-allowed disabled:opacity-60"
          x-text="pageNumber"
          x-on:click={`${onSetPage}(pageNumber)`}
          x-bind:disabled={`${loadingVar}`}
          :class={`pageNumber === ${pageVar} ? 'border-indigo-600 bg-indigo-600 text-white' : 'border-slate-200 bg-white text-slate-600 hover:border-slate-300 hover:text-slate-800'`}
        ></button>
      </template>
      <button
        type="button"
        class="inline-flex items-center gap-2 rounded-full border border-slate-200 bg-white px-4 py-2 text-xs font-semibold text-slate-600 transition hover:border-slate-300 hover:text-slate-800 disabled:cursor-not-allowed disabled:opacity-60"
        x-on:click={`${onNextPage}()`}
        x-bind:disabled={`${loadingVar} || (${totalPagesVar} ?? 1) === 0 || (${pageVar} ?? 1) >= (${totalPagesVar} ?? 1)`}
      >
        {nextLabel}
      </button>
    </div>
  </div>
</div>
