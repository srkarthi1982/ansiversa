---
interface Props {
  name: string;
  price: string;
  priceSuffix?: string;
  description: string;
  features: string[];
  ctaLabel: string;
  ctaHref: string;
  featured?: boolean;
  class?: string;
}

const {
  name,
  price,
  priceSuffix,
  description,
  features,
  ctaLabel,
  ctaHref,
  featured = false,
  class: className = '',
} = Astro.props as Props;

const cardClass = `card h-full flex flex-col${className ? ` ${className}` : ''} ${
  featured ? 'border-indigo-200 ring-2 ring-indigo-500/70' : ''
}`.trim();

const headingClass = featured
  ? 'text-sm font-semibold uppercase tracking-wide text-indigo-600'
  : 'text-sm font-semibold uppercase tracking-wide text-slate-500';

const buttonClass = featured
  ? 'mt-6 inline-flex w-full items-center justify-center rounded-xl bg-indigo-600 px-4 py-2 text-sm font-semibold text-white hover:bg-indigo-500'
  : 'mt-6 inline-flex w-full items-center justify-center rounded-xl border border-slate-200 px-4 py-2 text-sm font-semibold text-slate-700 hover:bg-slate-50';
---
<div class={cardClass}>
  <p class={headingClass}>{name}</p>
  <div class="mt-3 flex items-baseline gap-1">
    <span class="text-4xl font-black text-slate-900">{price}</span>
    {priceSuffix && <span class="text-sm text-slate-500">{priceSuffix}</span>}
  </div>
  <p class="mt-3 text-sm text-slate-600">{description}</p>
  <ul class="mt-4 space-y-2 text-sm text-slate-600">
    {features.map((feature) => (
      <li>âœ” {feature}</li>
    ))}
  </ul>
  <a href={ctaHref} class={buttonClass}>{ctaLabel}</a>
</div>
