---
interface Props {
  title: string;
  description?: string;
  eyebrow?: string;
  icon?: string;
  iconWrapperClass?: string;
  iconClass?: string;
  titleClass?: string;
  titleTag?: keyof HTMLElementTagNameMap;
  descriptionClass?: string;
  eyebrowClass?: string;
  class?: string;
  as?: keyof HTMLElementTagNameMap;
  baseClass?: string;
}

const {
  title,
  description,
  eyebrow,
  icon,
  iconWrapperClass = 'flex h-10 w-10 items-center justify-center rounded-xl bg-indigo-500/10 text-indigo-600',
  iconClass = 'text-base',
  titleClass = 'text-lg font-semibold text-slate-900',
  titleTag = 'h3',
  descriptionClass = 'mt-3 text-sm text-slate-600',
  eyebrowClass = 'text-xs font-semibold uppercase tracking-wide text-indigo-500',
  class: className = '',
  as = 'article',
  baseClass = 'rounded-3xl border border-slate-200 bg-white p-6 shadow-soft',
} = Astro.props as Props;

const Tag = as;
const HeadingTag = titleTag;
const hasCustomIcon = Astro.slots.has('icon');
const hasFooter = Astro.slots.has('footer');
const hasDefaultSlot = Astro.slots.has('default');
---
<Tag class={`${baseClass}${className ? ` ${className}` : ''}`}>
  {eyebrow && <p class={eyebrowClass}>{eyebrow}</p>}
  <div class={`flex items-start gap-3${icon || hasCustomIcon ? '' : ' flex-col gap-0'}`}>
    {(icon || hasCustomIcon) && (
      <span class={iconWrapperClass}>
        {hasCustomIcon ? <slot name="icon" /> : <i class={`${icon} ${iconClass}`} aria-hidden="true"></i>}
      </span>
    )}
    <div>
      <HeadingTag class={titleClass}>{title}</HeadingTag>
      {description && <p class={descriptionClass}>{description}</p>}
      {hasDefaultSlot && <div class="mt-3 text-sm text-slate-600"><slot /></div>}
    </div>
  </div>
  {hasFooter && (
    <div class="mt-4">
      <slot name="footer" />
    </div>
  )}
</Tag>
